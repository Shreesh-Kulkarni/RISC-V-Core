// Generated by SandPiper(TM) 1.14-2022/10/10-beta-Pro from Redwood EDA, LLC.
// (Installed here: /usr/local/mono/sandpiper/distro.)
// Redwood EDA, LLC does not claim intellectual property rights to this file and provides no warranty regarding its correctness or quality.


// For silencing unused signal messages.
`define BOGUS_USE(ignore)





//
// Signals declared top-level.
//

// For $in2.
logic L0_in2_a0;

// For $in3.
logic L0_in3_a0;

// For $in4.
logic L0_in4_a0;

// For $in5.
logic L0_in5_a0;

// For $in6.
logic L0_in6_a0;

// For $in7.
logic L0_in7_a0;

// For $inl.
logic L0_inl_a0;

// For $out.
logic L0_out_a0;

// For $out1.
logic L0_out1_a0;

// For $out2.
logic L0_out2_a0;

// For $out3.
logic L0_out3_a0;

// For $r_in2.
logic [31:0] L0_r_in2_n1,
             L0_r_in2_a0;

// For $r_in3.
logic [31:0] L0_r_in3_n1,
             L0_r_in3_a0;

// For $r_in4.
logic [31:0] L0_r_in4_n1,
             L0_r_in4_a0;

// For $r_in5.
logic [31:0] L0_r_in5_n1,
             L0_r_in5_a0;

// For $r_in6.
logic [31:0] L0_r_in6_n1,
             L0_r_in6_a0;

// For $r_in7.
logic [31:0] L0_r_in7_n1,
             L0_r_in7_a0;

// For $r_inl.
logic [31:0] L0_r_inl_n1,
             L0_r_inl_a0;

// For $reset.
logic L0_reset_a0;



   // Staging of signal $in2, which had no assignment.
   // Assign to a random value.
   // verilator lint_save
   // verilator lint_off WIDTH
   assign L0_in2_a0 = L0_r_in2_a0;
   // verilator lint_restore

   // Staging of signal $in3, which had no assignment.
   // Assign to a random value.
   // verilator lint_save
   // verilator lint_off WIDTH
   assign L0_in3_a0 = L0_r_in3_a0;
   // verilator lint_restore

   // Staging of signal $in4, which had no assignment.
   // Assign to a random value.
   // verilator lint_save
   // verilator lint_off WIDTH
   assign L0_in4_a0 = L0_r_in4_a0;
   // verilator lint_restore

   // Staging of signal $in5, which had no assignment.
   // Assign to a random value.
   // verilator lint_save
   // verilator lint_off WIDTH
   assign L0_in5_a0 = L0_r_in5_a0;
   // verilator lint_restore

   // Staging of signal $in6, which had no assignment.
   // Assign to a random value.
   // verilator lint_save
   // verilator lint_off WIDTH
   assign L0_in6_a0 = L0_r_in6_a0;
   // verilator lint_restore

   // Staging of signal $in7, which had no assignment.
   // Assign to a random value.
   // verilator lint_save
   // verilator lint_off WIDTH
   assign L0_in7_a0 = L0_r_in7_a0;
   // verilator lint_restore

   // Staging of signal $inl, which had no assignment.
   // Assign to a random value.
   // verilator lint_save
   // verilator lint_off WIDTH
   assign L0_inl_a0 = L0_r_inl_a0;
   // verilator lint_restore

   // Staging of random value for missing assignment.
   assign L0_r_in2_n1[31:0] = $random() ^ {31'b0, clk};
   always_ff @(posedge clk) L0_r_in2_a0[31:0] <= L0_r_in2_n1[31:0];

   // Staging of random value for missing assignment.
   assign L0_r_in3_n1[31:0] = $random() ^ {31'b0, clk};
   always_ff @(posedge clk) L0_r_in3_a0[31:0] <= L0_r_in3_n1[31:0];

   // Staging of random value for missing assignment.
   assign L0_r_in4_n1[31:0] = $random() ^ {31'b0, clk};
   always_ff @(posedge clk) L0_r_in4_a0[31:0] <= L0_r_in4_n1[31:0];

   // Staging of random value for missing assignment.
   assign L0_r_in5_n1[31:0] = $random() ^ {31'b0, clk};
   always_ff @(posedge clk) L0_r_in5_a0[31:0] <= L0_r_in5_n1[31:0];

   // Staging of random value for missing assignment.
   assign L0_r_in6_n1[31:0] = $random() ^ {31'b0, clk};
   always_ff @(posedge clk) L0_r_in6_a0[31:0] <= L0_r_in6_n1[31:0];

   // Staging of random value for missing assignment.
   assign L0_r_in7_n1[31:0] = $random() ^ {31'b0, clk};
   always_ff @(posedge clk) L0_r_in7_a0[31:0] <= L0_r_in7_n1[31:0];

   // Staging of random value for missing assignment.
   assign L0_r_inl_n1[31:0] = $random() ^ {31'b0, clk};
   always_ff @(posedge clk) L0_r_inl_a0[31:0] <= L0_r_inl_n1[31:0];





//
// Debug Signals
//

   if (1) begin : DEBUG_SIGS

      logic  \@0$in2 ;
      assign \@0$in2 = L0_in2_a0;
      logic  \@0$in3 ;
      assign \@0$in3 = L0_in3_a0;
      logic  \@0$in4 ;
      assign \@0$in4 = L0_in4_a0;
      logic  \@0$in5 ;
      assign \@0$in5 = L0_in5_a0;
      logic  \@0$in6 ;
      assign \@0$in6 = L0_in6_a0;
      logic  \@0$in7 ;
      assign \@0$in7 = L0_in7_a0;
      logic  \@0$inl ;
      assign \@0$inl = L0_inl_a0;
      logic  \@0$out ;
      assign \@0$out = L0_out_a0;
      logic  \@0$out1 ;
      assign \@0$out1 = L0_out1_a0;
      logic  \@0$out2 ;
      assign \@0$out2 = L0_out2_a0;
      logic  \@0$out3 ;
      assign \@0$out3 = L0_out3_a0;
      logic  \@0$reset ;
      assign \@0$reset = L0_reset_a0;


   end
